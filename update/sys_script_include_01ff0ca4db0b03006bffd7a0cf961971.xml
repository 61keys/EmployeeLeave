<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_125992_employee.SH_EmpTime</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>SH_EmpTime</name>
        <script><![CDATA[var SH_EmpTime = Class.create();
SH_EmpTime.prototype = {
	initialize: function() {
	},
	
	resetAll2:function(){
		/*
		var grUser = new GlideRecord("sys_user");
		grUser.addActiveQuery();
		grUser.query();
		while (grUser.next()) {
			if (grUser.x_125992_employee_max_vacation_hours != 0) {
				var gDate = new GlideDate();
				var id = grUser.sys_id;
				var dt = new x_125992_employee.SH_EmpTime();
				var maxHours = dt.getMaxHours(id);
				var days = dt.getDays();
				var accr = dt.getAccrual(maxHours,days);
				dt.updateAccruedHours(id,accr);
				gs.print(grUser.name + " " + accr)
				
			}
		}
		
		var grUser = new GlideRecord("sys_user");
		grUser.addActiveQuery();
		grUser.query();
		while (grUser.next()) {
			if (grUser.x_125992_employee_max_vacation_hours != 0) {
				grUser.x_125992_employee_accrued_vacation_hours = 0
				grUser.update();
			}
		}
		
		
 		*/
	},
	
	resetAll:function(){		
		var grUser = new GlideRecord("sys_user");
		//grUser.addActiveQuery();
		grUser.query();
		while (grUser.next()) {
			if (grUser.x_125992_employee_max_vacation_hours != 0) {
				grUser.x_125992_employee_remaning_pto_hours = grUser.x_125992_employee_max_vacation_hours;
				grUser.x_125992_employee_accrued_vacation_hours = 0;
				grUser.x_125992_employee_floating_holidays = 3;
				grUser.x_125992_employee_company_holidays = 8;
				grUser.update();
			}
		}
		
		
 		
	},
	
	getEmpId: function(userName){
		var usersysid = '';
		var t = new GlideRecord('sys_user');
		t.addQuery('user_name', userName);
		t.query();
		if(t.next()){
			usersysid = t.sys_id;
		}else{
			gs.addErrorMessage('Cant find ID of ' + userName);
		}
		
		return usersysid;
	},
	
	getHiredDate: function(id){
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			result = gr.x_125992_employee_hired_date;
		}
		return result;
	},
	
	getMaxHours: function(id){
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			result = gr.x_125992_employee_max_vacation_hours;
		}
		return result;
	},
	
	updateMaxHours: function(id,total){
		gs.info("updateMaxHours: id: " + id + " total: " + total);
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		//gs.error("updateMaxHours", gr.getLastErrorMessage());
		if(gr.next()){
			gr.x_125992_employee_remaning_pto_hours = gr.x_125992_employee_max_vacation_hours - total;
			gr.x_125992_employee_accrued_vacation_hours = gr.x_125992_employee_accrued_vacation_hours - total;
			gr.update();
		}
	},
	
	getFloating: function(id){
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			result = gr.x_125992_employee_floating_holidays;
		}
		return result;
	},
	
	updateFloatingDays: function(id){
		gs.info("UpdateFLoating: id: " + userId);
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			gr.x_125992_employee_floating_holidays = gr.x_125992_employee_floating_holidays - 1;
			gr.update();
		}
	},
	
	getRemianingPTO: function(id){
		var result= 0;
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			result = gr.x_125992_employee_remaning_pto_hours;
			
		}
		
		return result;
	},
	
	updateAccruedHours: function(id,accr){
		gs.info("Update Accrued: id: " + id);
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			gr.x_125992_employee_accrued_vacation_hours = gr.x_125992_employee_accrued_vacation_hours + accr;
			gr.update();
		}
	},
	
	updateCompanyDays: function(id){
		gs.info("UpdateFLoating: id: " + userId);
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			gr.x_125992_employee_company_holidays = gr.x_125992_employee_company_holidays - 1;
			gr.update();
		}
	},
	
	getDays: function(){
		var sgd1 = new GlideDate();
		sgd1.getDisplayValueInternal();
		//sgd1.setDisplayValue('2018-06-30');
		var sgd2 = new GlideDate();
		var glideYear = sgd2.getYearNoTZ();
		glideYear = glideYear + "-01-01";
		sgd2.setDisplayValue(glideYear);
		duration= GlideDate.subtract(sgd2, sgd1);
		var days = duration.getDisplayValue();
		days = this.getJustDays(days.toString());
		return parseInt(days);
	},
	
	validateStart:function(start,end){
		var gdt1 = new GlideDateTime(start);
		var gdt2 = new GlideDateTime(end);
		//gs.addInfoMessage("is on " + gdt1.onOrAfter(gdt2));
		//gs.addInfoMessage("is after " + gdt1.onOrBefore(gdt2));
		return gdt1.onOrAfter(gdt2);
	},
	
	getDaysTime: function(wStart,wEnd){				
		var sgd1 = new GlideDateTime();
		sgd1.setDisplayValue(wStart.toString());
		var sgd2 = new GlideDateTime();
		sgd2.setDisplayValue(wEnd.toString());
		var days= GlideDateTime.subtract(sgd1, sgd2);		
		days = this.getJustDays(days.getDisplayValue());
		//days = 0;
		
		return parseInt(days);
	},
	
	getAccrual:function(maxHours,days){
		
		var rate = maxHours/24;
		//var payperiods = Math.floor(days/15);
		var payperiods = days/15;
		var accrual = rate * payperiods;
		return accrual;
	},
	
	//get User Accrual
	getUserAccrual:function(id){
		var gr = new GlideRecord("sys_user");
		var accrual = '';
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			accrual = gr.x_125992_employee_accrued_vacation_hours;
		}
		
		return accrual;
	},
	
	//get the days
	getJustDays:function(str){
		var day = str;
		day = day.split(" ")[0];
		day = parseFloat(day);
		return day;
	},
	
	addTimeCard:function(userId,weekStart,sun,mon,tues,wed,thurs,fri,sat,category,total){
		gs.info("In addTimeCard : sysid: " + userId + " weekStart: " + weekStart + ' days: ' +sun,mon,tues,wed,thurs,fri,sat,category,total);
		var weekStartsOn = new GlideDate();
		weekStartsOn.setValue(weekStart);
		var timeSheetFactory = new global.TimeSheetFactory();
		var	timeSheetId = timeSheetFactory.getTimeSheet(userId, weekStartsOn);
		var gr = new GlideRecord('time_card');
		gr.initialize();
		gr.setValue('user', userId);
		gr.setValue('week_starts_on', weekStartsOn);
		gr.setValue('time_sheet', timeSheetId);
		gr.sunday = sun;
		gr.monday = mon;
		gr.tuesday = tues;
		gr.wednesday = wed;
		gr.thursday = thurs;
		gr.friday = fri;
		gr.sat = sat;
		gr.state = "Approved";
		gr.category = category;
		gr.user = userId;
		var tId = gr.insert();
		
		this.updatePTO(category,total,userId);
		
		return tId;
	},
	
	addNonPTOTimeCard:function(userId,weekStart,sun,mon,tues,wed,thurs,fri,sat,category,total){
		gs.info("In addTimeCard : sysid: " + userId + " weekStart: " + weekStart + ' days: ' +sun,mon,tues,wed,thurs,fri,sat,category,total);
		var weekStartsOn = new GlideDate();
		weekStartsOn.setValue(weekStart);
		var timeSheetFactory = new global.TimeSheetFactory();
		var	timeSheetId = timeSheetFactory.getTimeSheet(userId, weekStartsOn);
		var gr = new GlideRecord('time_card');
		gr.initialize();
		gr.setValue('user', userId);
		gr.setValue('week_starts_on', weekStartsOn);
		gr.setValue('time_sheet', timeSheetId);
		gr.sunday = sun;
		gr.monday = mon;
		gr.tuesday = tues;
		gr.wednesday = wed;
		gr.thursday = thurs;
		gr.friday = fri;
		gr.sat = sat;
		gr.state = "Approved";
		gr.category = category;
		gr.user = userId;
		var tId = gr.insert();
		
		return tId;
	},
	
	updatePTO:function(category,total,userId){
		gs.info("UpdatePTO: id: " + userId + " category: " + category + " total: " + total);
		if(category == 'company_holiday'){
			this.updateCompanyDays(userId);
		}
		if(category == 'excused_leave'){
		}
		if(category == 'floating_holiday'){
			this.updateFloatingDays(userId);
		}
		if(category == 'funeral'){
		}
		if(category == 'sick_leave'){
		}
		if(category == 'vacation'){
			this.updateMaxHours(userId, total);
		}
		
	},
	
	updatePTORestore:function(category,total,userId){
		//gs.info("Resore PTO: id: " + userId + " category: " + category + " total: " + total + " task: " + taskID);
		if(category == 'company_holiday'){
			this.restoreCompanyDays(userId);
		}
		if(category == 'floating_holiday'){
			this.restoreFloatingDays(userId);
		}
		if(category == 'vacation'){
			this.restoreMaxHours(userId, total);
		}
	},
	
	updatePTORestoreTC:function(category,total,userId){
		//gs.info("Resore PTO: id: " + userId + " category: " + category + " total: " + total + " task: " + taskID);
		if(category == 'company_holiday'){
			this.restoreCompanyDays(userId);
		}
		if(category == 'floating_holiday'){
			this.restoreFloatingDays(userId);
		}
		if(category == 'vacation'){
			this.restoreMaxHours(userId, total);
		}
	},
	
	restoreCompanyDays: function(id){
		//gs.info("UpdateFLoating: id: " + userId);
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			gr.x_125992_employee_company_holidays = gr.x_125992_employee_company_holidays + 1;
			gr.update();
		}
	},
	
	restoreFloatingDays: function(id){
		//gs.info("UpdateFLoating: id: " + userId);
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		if(gr.next()){
			gr.x_125992_employee_floating_holidays = gr.x_125992_employee_floating_holidays + 1;
			gr.update();
		}
	},
	
	restoreMaxHours: function(id,total){
		//gs.info("updateMaxHours: id: " + id + " total: " + total);
		var result='';
		var gr = new GlideRecord("sys_user");
		gr.addQuery('sys_id', id);
		gr.query();
		//gs.error("updateMaxHours", gr.getLastErrorMessage());
		if(gr.next()){
			gr.x_125992_employee_remaning_pto_hours = gr.x_125992_employee_remaning_pto_hours + total;
			gr.x_125992_employee_accrued_vacation_hours = gr.x_125992_employee_accrued_vacation_hours + total;
			gr.update();
		}
	},
	
	getCardsId: function(taskNum){
		var cardId = '';
		var gr = new GlideRecord('time_card');
		gr.addQuery('task' , taskNum);
		gr.query();
		if(gr.next()){
			cardId = gr.sys_id;
		}
		return cardId;
	},
	
	deleteCards: function(cardsID){
		var gr = new GlideRecord('time_card');
		gr.addQuery('sys_id' , cardsID);
		gr.query();
		while(gr.next()){
			gr.deleteRecord();
		}
		
	},	
	
	deletePTO: function(taskNum){
		var gr = new GlideRecord('x_125992_employee_employee_leave_request_table');
		gr.addQuery('task' , taskNum);
		gr.query();
		if(gr.next()){
			gr.deleteRecord();
		}
		
	},	
	type: 'SH_EmpTime'
	
	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-11 19:49:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>01ff0ca4db0b03006bffd7a0cf961971</sys_id>
        <sys_mod_count>152</sys_mod_count>
        <sys_name>SH_EmpTime</sys_name>
        <sys_package display_value="Employee Leave Request" source="x_125992_employee">2fb148a7db3203006bffd7a0cf9619ef</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Employee Leave Request">2fb148a7db3203006bffd7a0cf9619ef</sys_scope>
        <sys_update_name>sys_script_include_01ff0ca4db0b03006bffd7a0cf961971</sys_update_name>
        <sys_updated_by>steven.holt</sys_updated_by>
        <sys_updated_on>2018-01-30 12:32:01</sys_updated_on>
    </sys_script_include>
</record_update>
